<?php
// auto-generated by sfPropelCrud
// date: 2009/02/04 17:11:54
?>
<?php

/**
 * indicador actions.
 *
 * @package    indicadores
 * @subpackage indicador
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class indicadorActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('indicador', 'list');
  }

  public function executeList()
  {
    $this->indicadors = IndicadorPeer::doSelect(new Criteria());
  }

  public function executeShow()
  {
    $this->indicador = IndicadorPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->indicador);
  }

  public function executeCreate()
  {
    $this->indicador = new Indicador();

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->indicador = IndicadorPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->indicador);
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $indicador = new Indicador();
    }
    else
    {
      $indicador = IndicadorPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($indicador);
    }

    $indicador->setId($this->getRequestParameter('id'));
    $indicador->setIndicador($this->getRequestParameter('indicador'));
    $indicador->setBorrador($this->getRequestParameter('borrador', 0));
    $indicador->setObjetivoId($this->getRequestParameter('objetivo_id') ? $this->getRequestParameter('objetivo_id') : null);
    $indicador->setObjetivoEstr($this->getRequestParameter('objetivo_estr'));
    $indicador->setProceso($this->getRequestParameter('proceso') ? $this->getRequestParameter('proceso') : null);
    $indicador->setCategoriaId($this->getRequestParameter('categoria_id') ? $this->getRequestParameter('categoria_id') : null);
    $indicador->setDefincion($this->getRequestParameter('defincion'));
    $indicador->setMedicion($this->getRequestParameter('medicion'));
    $indicador->setDescripcion($this->getRequestParameter('descripcion'));
    $indicador->setFormulaTextual($this->getRequestParameter('formula_textual'));
    $indicador->setTipo($this->getRequestParameter('tipo'));
    $indicador->setFrecuencia($this->getRequestParameter('frecuencia'));
    $indicador->setResponsableId($this->getRequestParameter('responsable_id') ? $this->getRequestParameter('responsable_id') : null);
    $indicador->setQuienId($this->getRequestParameter('quien_id') ? $this->getRequestParameter('quien_id') : null);
    $indicador->setComo($this->getRequestParameter('como'));
    $indicador->setQue($this->getRequestParameter('que'));
    $indicador->setFormula($this->getRequestParameter('formula'));
    $indicador->setUmbralRojo($this->getRequestParameter('umbral_rojo'));
    $indicador->setUmbralAmarillo($this->getRequestParameter('umbral_amarillo'));
    $indicador->setUmbralVerde($this->getRequestParameter('umbral_verde'));
    $indicador->setMeta($this->getRequestParameter('meta'));
    $indicador->setIniciativa($this->getRequestParameter('iniciativa'));

    $indicador->save();

    return $this->redirect('indicador/show?id='.$indicador->getId());
  }

  public function executeDelete()
  {
    $indicador = IndicadorPeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($indicador);

    $indicador->delete();

    return $this->redirect('indicador/list');
  }
  
  /**
   * Muestra el formulario de creacion de formula para el indicador
   * Recibe el id del indicador
   */
  public function executeCreateformula()
  {
    if (!$this->getRequestParameter('id'))
    {
      $this->indicadors = IndicadorPeer::doSelect(new Criteria());
      $this->setTemplate('listIndicadoresFormula');
    }
    else
    {
      $this->indicador = IndicadorPeer::retrieveByPk($this->getRequestParameter('id'));
    }
  }
  
  /**
   * Almacena la formula
   */
  public function executeUpdateFormula()
  {
    $indicador = IndicadorPeer::retrieveByPk($this->getRequestParameter('id'));
    $indicador->setFormula($this->getRequestParameter('formula'));
    
    $indicador->save();

    return $this->redirect('indicador/show?id='.$indicador->getId());
  }
  
  /**
   * muestra el formulario de calculo del indicador
   */
  public function executeSeguimiento()
  {
    $this->indicador = IndicadorPeer::retrieveByPk($this->getRequestParameter('id'));
  }
  
  /**
   * calcula y almacena el indicador
   */
  public function executeUpdateSeguimiento()
  {
    $this->vars = array();
    
    $this->indicador = IndicadorPeer::retrieveByPk($this->getRequestParameter('id'));
    
    foreach ($this->indicador->getArrayVariables() as $key => $value)
    {
      $this->vars['var'.$key] = $this->getRequestParameter('var'.$key);
    }
    
    $this->ind = $this->indicador->calcularIndicador($this->vars, $this->getRequestParameter('observacion'));
    $this->formula = $this->indicador->getFormula();
  }

  /**
   * Soporta la funcion ajax en el formulario de indicadores, devuelve la lista de procesos o de actividades
   * poa segun el caso
   */
  public function executeCategoria()
  {
    // se usa 4 en la tabla 'categoria' para asociar indicadores de actividades poa
    $this->tipo = $this->getRequestParameter('categoria');

    if ($this->getRequestParameter('categoria') == 4) {
      //consultar la lista de actividades poa
      $this->lista = ActividadPoaPeer::doSelect(new Criteria());
    // procedimientos
    } elseif ($this->getRequestParameter('categoria') == 5) {
      $this->lista = ProcedimientoPeer::doSelect(new Criteria());
    } else {
      // consultar y devolver lista de procesos
      $this->lista = ProcesoPeer::doSelect(new Criteria());
    }
  }
}
